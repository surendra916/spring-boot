Mapstruct:
----------
Mapstruct is a library which can be used to reduce boilerplate code which is useful during 
conversion of Entity to DTO and viceversa.

@Mapper
class SampleMapper{

}

We can trigger the MapStruct processing by executing an mvn clean install.

This will generate the implementation class under /target/generated-sources/annotations/.

Here is the class that MapStruct auto-creates for us:

public class SimpleSourceDestinationMapperImpl
  implements SimpleSourceDestinationMapper {
    @Override
    public SimpleDestination sourceToDestination(SimpleSource source) {
        if ( source == null ) {
            return null;
        }
        SimpleDestination simpleDestination = new SimpleDestination();
        simpleDestination.setName( source.getName() );
        simpleDestination.setDescription( source.getDescription() );
        return simpleDestination;
    }
    @Override
    public SimpleSource destinationToSource(SimpleDestination destination){
        if ( destination == null ) {
            return null;
        }
        SimpleSource simpleSource = new SimpleSource();
        simpleSource.setName( destination.getName() );
        simpleSource.setDescription( destination.getDescription() );
        return simpleSource;
    }
}

**To use spring IOC which is components in our project inside mapper we have to mention
componentModel as "spring" => 
@Mapper(componentModel = "spring")
public interface SimpleSourceDestinationMapper


** To map different fields, we use @Mapper like below.
Only for source we use source field.fieldName (source="dto.employeeId",source="entity.id")
@Mapper
public interface EmployeeMapper {
    
    @Mapping(target="employeeId", source="entity.id")
    @Mapping(target="employeeName", source="entity.name")
    EmployeeDTO employeeToEmployeeDTO(Employee entity);

    @Mapping(target="id", source="dto.employeeId")
    @Mapping(target="name", source="dto.employeeName")
    Employee employeeDTOtoEmployee(EmployeeDTO dto);
}

DefaultValue:
-------------
@Mapping(target="employeeId", source="entity.id")
@Mapping(target="employeeName", source="entity.name",defaultValue="soundar") ****
EmployeeDTO employeeToEmployeeDTO(Employee entity);


Generate Using Expressions:
----------------------------

@Mapping(target = "id", source = "person.id", 
      defaultExpression = "java(java.util.UUID.randomUUID().toString())")
    PersonDTO personToPersonDTO(Person person);


Types also be converted:
-----------------------

Types also be converted automatically

product.setQuantity(Integer.parseInt(quantity));
productDto.setQuantity(String.valueOf(quantity));


